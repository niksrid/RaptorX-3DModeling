import os
import sys
import numpy as np
import cPickle

## this script generates a TGT file from .hhm
## we try to be compatible with the old TGT format
## the result is saved into a .tgt.pkl file

from LoadTPLTGT import load_hhm as LoadHHM
from LoadTPLTGT import DetectMultiHIS

from DL4PropertyPrediction import PropertyUtils
#from SSUtils import SS8Letter2Code, SS8Letter2SS3Code, SS8Letter2SS3Letter

def Usage():
	print 'python HHM2TGT.py hhmfile predictedPropertyFile [ResDir]'
	print '	hhmfile: an hhm file generated by hhmake from a multiple sequence alignment'
	print '	propertyFile: a PKL file containing properties (secondary structure and solvent accessibility) predicted by DL4PropertyPrediction'

if __name__ == "__main__":
	if len(sys.argv) < 3:
		Usage()
		exit(1)

	hhmfile = sys.argv[1]
	propertyfile = sys.argv[2]

	ResDir=os.getcwd()
	if len(sys.argv)>=4:
		ResDir = sys.argv[3]
		if not os.path.isdir(ResDir):
			print 'ERROR: invalid result directory: ', ResDir
			exit(1)

	hhm = LoadHHM(hhmfile)

	protein = dict()
	for k in ['name', 'sequence', 'length', 'NEFF', 'PSFM', 'PSSM', 'DateCreated', 'HMMHeader']:
		protein[k] = hhm[k]

	protein['HISflag'] = DetectMultiHIS(protein['sequence'])	

	length = protein['length']

	name, sequence, predProb, predString = PropertyUtils.LoadPredictedProperties(propertyfile)
	## check to make sure the two sequences are equal
	if protein['sequence'] != sequence:
		print 'ERROR: inconsistent sequence in ', hhmfile, ' and ', propertyfile
		exit(1)

	if not predProb.has_key('SS3_Discrete3C') or (not predProb.has_key('SS8_Discrete8C')) or (not predProb.has_key('ACC_Discrete3C')):
		print 'ERROR: missing predicted properties in ', propertyfile
		print 'ERROR: SS3, SS8 and ACC are needed for TGT generation'
		exit(1)

	protein['SS3'] = predProb['SS3_Discrete3C']
	protein['SS8'] = predProb['SS8_Discrete8C']
	protein['ACC_prob'] = predProb['ACC_Discrete3C']
	protein['ACC'] = np.argmax( protein['ACC_prob'], axis=1 ).astype(np.int16)

	protein['ACCseq'] = predString['ACC_Discrete3C']
	protein['SSEseq'] = predString['SS3_Discrete3C']
	protein['SSEconf'] = (np.amax(protein['SS3'],axis=1)*10).astype(np.int16)
	protein['ACCconf'] = (np.amax(protein['ACC_prob'],axis=1)*10).astype(np.int16)

	savefile = os.path.join(ResDir, protein['name'] + '.tgt.pkl')
	with open(savefile, 'w') as fh:
		cPickle.dump(protein, fh, protocol=cPickle.HIGHEST_PROTOCOL)
