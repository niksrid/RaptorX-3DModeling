import numpy as np
import os
import sys
import cPickle

"""
This script extracts primary sequence from an hhm file generated by the HHpred/HHblits package. 
The sequence is stored in a text file in the FASTA format
"""

import SequenceUtils

## this function reads a profile HMM file generated by HHpred/HHblits package
def ExtractSeqFromHHM(hhmfile):
	with open(hhmfile, 'r') as fh:
		content = [ r.strip() for r in list(fh) ]
	if not bool(content):
		print 'ERROR: empty profileHMM file: ', hhmfile
		exit(1)
	if not content[0].startswith('HHsearch'):
		print 'ERROR: this file may not be a profileHMM file generated by HHpred/HHblits: ', hhmfile
		exit(1)
	if len(content) < 10:
		print 'ERROR: this profileHMM file is too short: ', hhmfile
		exit(1)

	protein = {}

	## get sequence name
	if not content[1].startswith('NAME '):
		print 'ERROR: the protein name shall appear at the second line of profileHMM file: ', hhmfile
		exit(1)
	fields = content[1].split()
	if len(fields) < 2:
		print 'ERROR: incorrect name format in profileHMM file: ', hhmfile
		exit(1)
	protein['name'] = fields[1]

	i = 0
	while i < len(content):
		row = content[i]
		if len(row)<1:
			i += 1
			continue

		if row.startswith('DATE '):
			protein['DateCreated'] = row[6:]
			i += 1
			continue

		if row.startswith('NEFF '):
			protein['NEFF'] = np.float32(row.split()[1])
			i += 1
			continue

		if row.startswith('LENG '):
			protein['length'] = np.int32(row.split()[1])
			i += 1
			continue

		if row.startswith('>ss_pred'):
			## read the predicted secondary structure
			start = i+1
			end = i+1
			while not content[end].startswith('>'):
				end += 1
			protein['SSEseq'] = ''.join(content[start:end]).replace('C', 'L')
			if len(protein['SSEseq']) != protein['length']:
				print 'ERROR: inconsistent sequence length and predicted SS sequence length in hhmfile: ', hhmfile
				exit(1)
			i = end
			continue

		if row.startswith('>ss_conf'):
			## read the predicted secondary structure confidence score
			start = i+1
			end = i+1
			while not content[end].startswith('>'):
				end += 1

			SSEconfStr = ''.join(content[start:end])
			protein['SSEconf'] = [ np.int16(score) for score in SSEconfStr ]

			if len(protein['SSEconf']) != protein['length']:
				print 'ERROR: inconsistent sequence length and predicted SS confidence sequence length in hhmfile: ', hhmfile
				exit(1)

			i = end
			continue
			

		if row.startswith('>' + protein['name']):
			## read in the sequence in the following lines
			start = i+1
			end = i+1
			while (not content[end].startswith('>')) and (not content[end].startswith('#') ):
				end += 1

			## at this point, content[end] shall start with >
			protein['sequence'] = ''.join(content[start:end])
			if len(protein['sequence']) != protein['length']:
				print 'ERROR: inconsistent sequence length in hhmfile: ', hhmfile
				exit(1)
			i = end
			return protein

		i += 1

	return protein
	
	

## for test only
if __name__ == "__main__":
	if len(sys.argv) < 2:
		print 'python ExtractSeqFromHHM.py hhm_file'
		print '	the input file shall end with .hhm'
		exit(1)

	file = sys.argv[1]

	if file.endswith('.hhm'):
		protein = ExtractSeqFromHHM(file)
	else:
		print 'ERROR: the input file shall have suffix .hhm'
		exit(1)

	savefile = os.path.basename(file).split('.')[0] + '.fasta'
	with open(savefile, 'wr') as fh:
		line1 = '>' + protein['name']
		line2 = protein['sequence']
		fh.writelines('\n'.join([line1, line2]) )
