## this script parse a .sst file generated by PROMOTIF3 and generate the following information: beta-pairing, hydrogen-bonding, native secondary structure, phi, psi, alpha and kappa
## this script also takes a TPL file as input to read the mapping from DSSP sequence (SST sequence) to SEQRES sequence (i.e., the sequence in the input feature)
## the output file contains a python dictionary where ['HB'] and ['BetaPairing'] are sparse binary  matrices for hydrogen-bonding and beta-pairing.

import sys
import os
import numpy as np
import cPickle
from scipy.sparse import  coo_matrix

if len(sys.argv) < 3:
	print 'Usage: ParseSSTFile.py sstFile tplFile'
	exit(-1)

##load the sst file
sstFile = sys.argv[1]
f = open(sstFile, 'r')
content = [ line.rstrip() for line in list(f) ]
f.close()

## load the tpl file
tplFile = sys.argv[2]
f = open(tplFile, 'r')
tplContent = [ line.strip() for line in list(f) ]
f.close()

if not tplContent[4].startswith('SEQRES'):
	print 'incorrect tpl file format at line: ', tplContent[4]
	exit(-1)

if not tplContent[5].startswith('DSSP'):
	print 'incorrect tpl file format at line: ', tplContent[5]
	exit(-1)
SEQRESsequence = tplContent[4].split('= ')[-1]
DSSPsequence = tplContent[5].split('= ')[-1]

## get the PDB ID and chain name
name = content[1].split('/')[-1].split('.')[0]
print 'name: ', name

## get the sequence length
seqLenLine = content[3]
if not seqLenLine.startswith(' Sequence'):
	print 'seqLenLine is incorrect: ', seqLenLine
	exit(-1)

seqLen = int( seqLenLine.split()[-1] )
print 'seqLen = ', seqLen

if len(content) < 7+seqLen:
	print 'the number of effective lines is smaller than the sequence length'
	exit(-1)

## get the sequence in the sst file
SSTsequence = ''
for c in content[7: 7+seqLen]:
	residue = c[19]
	SSTsequence += residue

## validation

## remove gaps from DSSPsequence and then compare it with SSTsequence to see if they are same or not
DSSPseq_nogaps = DSSPsequence.replace('-', '')

if DSSPseq_nogaps != SSTsequence:
	print 'the DSSP sequence in the tpl file is inconsistent with the sequence in the .sst file: ', name
	exit(-1)

missing = [ 1 if dssp=='-' else 0 for dssp in DSSPsequence  ]
existing = [ 1 if dssp!='-' else 0 for dssp in DSSPsequence ]
existingSum = np.cumsum( existing )
DSSP2SEQRES = np.zeros(len(SSTsequence), np.int32)

for i, s, dssp in zip(range(len(DSSPsequence)), existingSum, DSSPsequence):
        if dssp != '-' :
                DSSP2SEQRES[s-1] = i

fullSeqLen = len(SEQRESsequence)
BetaPairings = np.zeros( (fullSeqLen, fullSeqLen), dtype=np.int32 )
HB = np.zeros( (fullSeqLen, fullSeqLen), dtype=np.int32)
phiList = [999.9] * fullSeqLen
psiList = [999.9] * fullSeqLen
alphaList = [999.9] * fullSeqLen
kappaList = [999.9] * fullSeqLen
secStr = ['L'] * fullSeqLen

for c in content[7: 7+seqLen]: 
	##print c
	resIndex = int( c[:5] )
	assert (resIndex >=1) 
	assert (resIndex <= seqLen)

	realIndex = DSSP2SEQRES[ resIndex - 1]

	##residue = c[19]
	##sequence += residue

	ss8 = c[23]
	if ss8 != ' ':
		secStr[realIndex] = ss8

	rightPart = c[38:]
	fields = rightPart.split()
	if len(fields) != 18:
		print 'wrong format at line: ', c
		exit(-1)

	#print resIndex, residue, ss8

	p1 = int(fields[0])
	p2 = int(fields[1])

	if p1 > 0:
		BetaPairings[realIndex, DSSP2SEQRES[p1-1] ] = 1
	if p2 > 0:
		BetaPairings[realIndex, DSSP2SEQRES[p2-1] ] = 1

	phi = float(fields[2])
	psi = float(fields[3])
	##omega = float(fields[4])
	alpha = float(fields[5])
	kappa = float(fields[6])

	phiList[realIndex] = phi
	psiList[realIndex] = psi
	alphaList[realIndex] = alpha
	kappaList[realIndex] = kappa

	donorTo1 = int(fields[8])
	donorTo2 = int(fields[12])

	if donorTo1 > 0:
		HB[realIndex, DSSP2SEQRES[donorTo1-1] ] =1
	if donorTo2 > 0:
		HB[realIndex, DSSP2SEQRES[donorTo2-1] ] =1

	#print p1, p2
	#print phi, psi, alpha, kappa
	#print donorTo1, donorTo2

result = dict()
result['name'] = name
result['notes'] = 'This dictionary contains the parsing result of .sst file generated by PROMOTIF v3. The two keys HB and BetaPairing are for the sparse binary hydrogen-bonding and beta-pairing matrices.'
result['missing'] = missing
result['DSSPsequence'] = DSSPsequence
result['sequence'] = SEQRESsequence
result['secondary'] = ''.join(secStr)
result['phi'] = np.array(phiList, dtype=np.float32)
result['psi'] = np.array(psiList, dtype=np.float32)
result['alpha'] = np.array(alphaList, dtype=np.float32)
result['kappa'] = np.array(kappaList, dtype=np.float32)
result['BetaPairing'] = coo_matrix(BetaPairings)
result['HB'] = coo_matrix(HB)

savefile = name + '.HBBeta.pkl'
f= open(savefile, 'wb')
cPickle.dump(result, f, cPickle.HIGHEST_PROTOCOL)
f.close()
