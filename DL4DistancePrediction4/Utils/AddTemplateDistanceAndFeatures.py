import numpy as np
import sys
import os
import cPickle
import copy


"""
This script merges template-based features with the original distance prediction features to form a new set of features for distance prediction
Usage: python AddTemplateAndDistanceFeatures.py originalDistanceFeaturesPKL tplSimFeaturesAtomPKL
The originalDistanceFeaturesPKL may contain the HBBeta information
tplSimFeaturesAtomPKL is generated by GenFeatures4AllAlignmentAtom.py
"""
if len(sys.argv)<3:
	print 'python AddTemplateAndDistanceFeatures.py originalDistanceFeaturesPKLs tplSimFeaturesAtomPKLs'
	exit(-1)

originalFeatureFiles = sys.argv[1].split('+')
tplSimFeatureFiles = sys.argv[2].split('+')

##load the tpl similarity feature file
tplfeatures=[]
for tplSimFeatureFile in tplSimFeatureFiles:
	tplfh = open(tplSimFeatureFile, 'rb')
	tplfeatures.extend(cPickle.load(tplfh) )
	tplfh.close()

print 'loaded templated-based features for ', len(tplfeatures), ' proteins'

##rebuild the tpl sim features for quick index
tplfeaturesPool = dict()
for tplf in tplfeatures:
	queryName = tplf[0]
	if not tplfeaturesPool.has_key( queryName ):
		tplfeaturesPool[queryName] = [ tplf ]
	else:
		tplfeaturesPool[queryName].append( tplf )

##load the original distance feature files
orifeatures=[]
for originalFeatureFile in originalFeatureFiles:
	ofh = open(originalFeatureFile, 'rb')
	orifeatures.extend( cPickle.load(ofh) )
	ofh.close()

print 'loaded original features for ', len(orifeatures), ' proteins'


mergedFeaturesPool = []
missedProteins = []
##merge the features
for protein in orifeatures:
	name = protein['name']
	if not tplfeaturesPool.has_key(name):
		print 'WARNING: there is no tpl features for ', name
		missedProteins.append(name)
		continue

	for tplfeatures in tplfeaturesPool[name]:
		seq, temp, simScore, tplDistMatrix = tplfeatures
		if len(simScore) != len(protein['sequence']):
			print 'inconsistent protein length between the original distance features and the template-based similarity features for protein ', name
			exit(-1)

		mergedFeatures = copy.deepcopy( protein )
		mergedFeatures['name'] = '-'.join([seq, temp])
        	mergedFeatures['queryName'] = seq
        	mergedFeatures['tempName'] = temp

		##use the blosum scores, profile scores and 3-state secondary structure similarity score, ignore others
		mergedFeatures['tplSimScore'] = np.array(simScore[:, 0:11])
		mergedFeatures['tplDistMatrix'] = tplDistMatrix

		mergedFeaturesPool.append(mergedFeatures)

print 'In total generated ', len(mergedFeaturesPool), ' merged features for ', len(orifeatures)-len(missedProteins), ' proteins'
print 'could not generate merged features for ', len(missedProteins), ' proteins'


##save the merged features
filenameItems = os.path.basename(originalFeatureFiles[0]).split('.')[0: -2] + os.path.basename(tplSimFeatureFiles[0]).split('.')[0:1] + os.path.basename(originalFeatureFiles[0]).split('.')[-2:]
filename = '.'.join( filenameItems)

print 'writing the merged features to file ', filename
fh = open(filename, 'wb')
cPickle.dump(mergedFeaturesPool, fh, protocol = cPickle.HIGHEST_PROTOCOL)
fh.close()



