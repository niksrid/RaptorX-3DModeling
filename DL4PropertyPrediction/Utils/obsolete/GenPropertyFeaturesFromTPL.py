import numpy as np
import sys
import os
import cPickle

from DL4PropertyPrediction import PropertyUtils
from LoadAngleFile import LoadAngleFile
from Alignment.LoadTPLTGT import load_tpl as LoadTPL

## this script generates input features and labels for property predictio, training and validation.
## it takes information from the TPL files and Yujuan's angle files

def Usage():
	print 'python GenPropertyFeaturesFromTPL.py tplFile angFile'
	print '	This script generates a property feature file (including labels) from a tpl file and an ang file'
	print '	tplFile: the tpl file generated for template-based modeling'
	print '	angFile: the ang file generated by Yujuan code'

def LoadTrainData4Properties(tplFile, angFile):

	tpl = LoadTPL(tplFile)
	Ang = LoadAngleFile(angFile)

	assert tpl['sequence'] == Ang['sequence']
	assert all(tpl['missing'] == Ang['Missing'])
        assert ( tSS == aSS for tSS, aSS, m in zip(tpl['SS_str'], Ang['SS'], tpl['missing']) if m!=1 )

	## merge tpl and ang to generate a new training and validation file for protein property prediction
	protein = dict()
	
	protein['name'] = tpl['name']
	protein['sequence'] = tpl['sequence']
	protein['length'] = tpl['length']
	protein['NEFF'] = tpl['NEFF']

	protein['PSFM'] = tpl['PSFM']
	protein['PSSM'] = tpl['PSSM']

	protein['ACC'] = tpl['ACC']
	protein['pACC'] = tpl['pACC']
	protein['CNa'] = tpl['CNa']	
	protein['CNb'] = tpl['CNb']
	#protein['Ca'] = tpl['Ca']
	#protein['Cb'] = tpl['Cb']	

	protein['SS'] = Ang['SS']
	protein['DISO'] = Ang['DISO']
        protein['CLE'] = Ang['CLE']
	protein['Phi'] = Ang['Phi']
	protein['Psi'] = Ang['Psi']
	protein['Theta'] = Ang['Theta']
	protein['Tau'] = Ang['Tau']
	protein['Omg'] = Ang['Omg']

	##merge Phi and Psi
	protein['PhiPsi'] = np.transpose( np.array([ protein['Phi'], protein['Psi'] ]) )

	##merge Theta and Tau
	protein['ThetaTau'] = np.transpose( np.array([ protein['Theta'], protein['Tau'] ]) )

	## the missing residues have no 3D coordinates and thus, angles and solvent accessibility
	protein['Missing'] = Ang['Missing']

	protein['SS8'] = protein['SS']
	protein['SS3'] = ''.join([PropertyUtils.SS8Letter2SS3Letter[c] for c in protein['SS8'] ] )

	protein['ForTrain'] = True

	return protein

def main(argv):

	if len(argv) < 2:
		Usage()
		exit(1)

	tplFile = argv[0]
	angFile = argv[1]

	if not tplFile.endswith('.tpl'):
		print 'ERROR: the tpl file shall end with .tpl'
		exit(1)

	protein = LoadTrainData4Properties(tplFile, angFile)

	savefile = protein['name'] + '.propertyFeatures.pkl'
	with open(savefile, 'wb') as fh:
		cPickle.dump( protein, fh, protocol=cPickle.HIGHEST_PROTOCOL)

if __name__ == "__main__":
        main(sys.argv[1:])

