import numpy as np
import sys
import os
import cPickle

from DL4PropertyPrediction import PropertyUtils
from Common.LoadTPLTGT import load_tgt as LoadTGT
from Common.LoadTPLTGT import load_hhm as LoadHHM

## this script generates input features and labels for property prediction from an HHM/TGT file and a ground truth file (i.e., .native.pkl)

def Usage():
	print 'python GenPropertyFeaturesFromTPL.py tgtFile/hhmFile nativeFile'
	print '	This script generates property features (and labels) from a tgtFile/hhmFile and a native file'
	print '	tgtFile/hhmFile: a tgt file or an hhm file'
	print '	nativeFile: the ground truth file generated by Common/CalcGroundTruthFromSeqPDB.py'

def LoadNativeFile(nativeFile):
	with open(nativeFile, 'r') as fh:
		native = cPickle.load(fh)
	return native

def LoadTrainData4Properties(tgtFile, nativeFile):
	if tgtFile.endswith('.hhm'):
		tgt = LoadHHM(tgtFile)
	else:
		tgt = LoadTGT(tgtFile)
	native = LoadNativeFile(nativeFile)

	assert tgt['sequence'] == native['sequence']

	protein = dict()
	
	protein['name'] = tgt['name']
	protein['sequence'] = tgt['sequence']
	protein['length'] = tgt['length']
	protein['NEFF'] = tgt['NEFF']

	protein['PSFM'] = tgt['PSFM']
	protein['PSSM'] = tgt['PSSM']

	if tgt.has_key('SS3'):
		protein['predSS3'] = tgt['SS3']

	if tgt.has_key('SS8'):
		protein['predSS8'] = tgt['SS8']

	if tgt.has_key('ACC_prob'):
		protein['predACC'] = tgt['ACC_prob']

	protein['SS'] = native['SS']
	protein['DISO'] = native['missing']
	protein['Phi'] = native['Phi']
	protein['Psi'] = native['Psi']
	protein['Theta'] = native['Theta']
	protein['Tau'] = native['Tau']
	if native.has_key('Omg'):
		protein['Omg'] = native['Omg']

	##merge Phi and Psi
	protein['PhiPsi'] = np.transpose( np.array([ protein['Phi'], protein['Psi'] ]) )

	##merge Theta and Tau
	protein['ThetaTau'] = np.transpose( np.array([ protein['Theta'], protein['Tau'] ]) )

	## the missing residues have no 3D coordinates and thus, angles and solvent accessibility
	protein['Missing'] = native['missing']

	protein['SS8'] = protein['SS']
	protein['SS3'] = ''.join([PropertyUtils.SS8Letter2SS3Letter[c] for c in protein['SS8'] ] )

	protein['ForTrain'] = True

	return protein

def main(argv):

	if len(argv) < 2:
		Usage()
		exit(1)

	tgtFile = argv[0]
	nativeFile = argv[1]

	protein = LoadTrainData4Properties(tgtFile, nativeFile)

	savefile = protein['name'] + '.propertyFeatures.pkl'
	with open(savefile, 'wb') as fh:
		cPickle.dump( protein, fh, protocol=cPickle.HIGHEST_PROTOCOL)

if __name__ == "__main__":
        main(sys.argv[1:])

